import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

import Amplify, { Analytics, Storage, API, graphqlOperation, XR} from 'aws-amplify';
import awsconfig from './aws-exports';
import  { Authenticator, withAuthenticator }  from 'aws-amplify-react';
import scene1Config from './sumerian_exports_af2304edc8334160b5432b0ac5076b10.json'; // This file will be generated by the Sumerian AWS Console

Amplify.configure(awsconfig);

XR.configure({
  SumerianProvider: {
    region: 'us-east-1', // Sumerian region
    scenes: {
      "MlaaiIntro": { // Friendly scene name
        sceneConfig: scene1Config // Scene configuration from Sumerian publish
      }
    },
  }
});

Storage.configure({ level: 'private' });

const listTodos = `query listTodos {
  listTodos{
    items{
      id
      name
      description
    }
  }
}`;

const addTodo = `mutation createTodo($name:String! $description: String!) {
  createTodo(input:{
    name:$name
    description:$description
  }){
    id
    name
    description
  }
}`;

function IndeterminateLoading() {
    return <img src={logo} className="App-logo" alt="logo"/>;
}

class SumerianScene extends Component {

    async componentDidMount() {
        await this.loadAndStartScene();
    }

    render() {
        return <div
            id="sumerian-scene-dom-id"
            style={{width: "100%", height: "100%", position: "absolute"}}
        />;
    }

    async loadAndStartScene() {
		await XR.loadScene(this.props.scene, "sumerian-scene-dom-id");
		if (XR.isSceneLoaded(this.props.scene)) {
			console.log ('Audio is enabled'); 
			if (XR.isMuted(this.props.scene)) {
				// The scene is muted
				console.log ('Audio is not enabled') ;
				XR.setMuted(this.props.scene, false) // Unmute
			}

		}
		XR.enableAudio(this.props.scene)
		
        const controller = XR.getSceneController(this.props.scene);
        this.props.onLoaded(controller);
		
		
        XR.start(this.props.scene);
		
    }

}

class App extends Component {
	  
		uploadFile = (evt) => {
		const file = evt.target.files[0];
		const name = file.name;

		Storage.put(name, file).then(() => {
		  this.setState({ file: name });
		})
	  }

	  async componentDidMount() {
		Analytics.record('Amplify_CLI');
	  }
	  
	  todoMutation = async () => {
		  const todoDetails = {
			name: 'Party tonight!',
			description: 'Amplify CLI rocks!'
		  };

		  const newTodo = await API.graphql(graphqlOperation(addTodo, todoDetails));
		  alert(JSON.stringify(newTodo));
		};

		listQuery = async () => {
		  console.log('listing todos');
		  const allTodos = await API.graphql(graphqlOperation(listTodos));
		  alert(JSON.stringify(allTodos));
		};

		post = async () => {
		  console.log('calling api');
		  const response = await API.post('mlaaiapp', '/items', {
			body: {
			  id: '1',
			  name: 'hello amplify!'
			}
		  });
		  alert(JSON.stringify(response, null, 2));
		};
		get = async () => {
		  console.log('calling api');
		  const response = await API.get('mlaaiapp', '/items/object/1');
		  alert(JSON.stringify(response, null, 2));
		};
		list = async () => {
		  console.log('calling api');
		  const response = await API.get('mlaaiapp', '/items/1');
		  alert(JSON.stringify(response, null, 2));
		};

	constructor(props) {
			super(props);
			this.state = {
				loading: true,
				sceneController: null
			};
    }

    sceneLoaded(sceneController) {
        this.setState({
            loading: false,
            sceneController
        });
    }

    render() {
        return (
            <div className="App">
				<Authenticator usernameAttributes='email'/>
                {this.state.loading && <IndeterminateLoading/>}
                <div style={{visibility: this.state.loading && 'hidden'}}>
                    <SumerianScene scene='MlaaiIntro' onLoaded={(controller) => this.sceneLoaded(controller)}/>
                </div>
            </div>
        );
    }
}

const signUpConfig = {
  header: 'Mlaai Sign Up',
  hideAllDefaults: true,
  defaultCountryCode: '1',
  signUpFields: [
    {
      label: 'User Name',
      key: 'username',
      required: true,
      displayOrder: 1,
      type: 'string'
    },
    {
      label: 'Password',
      key: 'password',
      required: true,
      displayOrder: 2,
      type: 'password'
    },
    {
      label: 'Email',
      key: 'email',
      required: true,
      displayOrder: 3,
      type: 'string'
    }
  ]
};
const usernameAttributes = 'User Name';

export default withAuthenticator(App, {
  signUpConfig,
  usernameAttributes
});
// Show loading screen before the full XR library has been loaded.
